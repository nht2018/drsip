%%
%  Author: Hantao Nie (nht@pku.edu.cn)
%  Date: 2023-09-08 14:40:39
%  LastEditors: Hantao Nie (nht@pku.edu.cn)
%  LastEditTime: 2023-10-31 23:14:52
%  Description:
%
%  Copyright (c) 2023, Hantao Nie, Peking University.
%

function [info, flag] = linsysfact(lhs, info)
%% factorize the linear system lhs * d = rhs

assert(isfield(info, 'solver'));

if strcmp(info.solver, 'auto')
    % we consider cholesky and ldl for PSD case and non-PSD case respectively
    if lhs.dim2 == 0 && lhs.dim3 == 0 % PSD case
        if nnz(lhs.mat) / numel(lhs.mat) > 0.1 % dense case
            info.solver = 'chol';
        else % sparse case
            if exist('ldlchol', 'file') % use SuiteSparse ldlchol
                info.solver = 'ldlchol';
            elseif exist('lchol', 'file') % use SuiteSparse lchol
                info.solver = 'lchol';
            else
                info.solver = 'chol'; % use matlab chol
            end
        end
    else % non-PSD case
        if nnz(lhs.mat) / numel(lhs.mat) > 0.1
            info.solver = 'ldl';
        else
            info.solver = 'ldlsparse';
        end
    
    end
end


if strcmp(info.solver, 'pardiso')
    [info, flag] = linsysfact_pardiso(lhs, info);  
elseif strcmp(info.solver, 'pcg')
    info.pcg_iter = 0;
    % info.R = ichol(lhs.mat); % preconditioner
    % info.R = ichol(lhs.mat, struct('michol','on'));
elseif strcmp(info.solver, 'qmr')
    info.qmr_iter = 0;
    % info.R = ichol(lhs.mat); % preconditioner
    % info.R = ichol(lhs.mat, struct('michol','on'));  
elseif strcmp(info.solver, 'ldlchol')  % ld for positive definite matrix
    [info, flag] = linsysfact_ldlchol(lhs, info);
    if flag ~= 0
        warning('ldlchol fail'); 
        info.solver = 'lu'; 
    end
elseif strcmp(info.solver, 'chol')
    [info, flag] = linsysfact_chol(lhs, info);
    if flag ~= 0
        warning('chol fail'); 
        info.solver = 'lu'; 
    end
elseif strcmp(info.solver, 'spchol')
    [info, flag] = linsysfact_spchol(lhs, info);
    if flag ~= 0
        warning('spchol fail'); 
        info.solver = 'lu'; 
    end
elseif strcmp(info.solver, 'lchol')
    [info, flag] = linsysfact_lchol(lhs, info);
    if flag ~= 0
        warning('lchol fail'); 
        info.solver = 'lu'; 
    end
elseif strcmp(info.solver, 'ldlsparse')  % ld for not neccessarily positive definite matrix
    [info, flag] = linsysfact_ldlsparse(lhs, info);
    if flag ~= 0
        warning('ldlsparse fail'); 
        info.solver = 'lu'; 
    end
elseif strcmp(info.solver, 'ldl')
    [info, flag] = linsysfact_ldl(lhs, info);
    if flag ~= 0
        warning('ldl fail'); 
        info.solver = 'lu'; 
    end
end


% Once Cholesky or LDL fail, we switch to LU factorization in all later iterations
if strcmp(info.solver, 'lu')
    [info, flag] = linsysfact_lu(lhs, info);
    if flag ~= 0
        warning('lu fail'); 
        info.solver = 'matlab_backslash'; 
    end
end

% if LU still fail, we switch to matlab backslash 
if strcmp(info.solver, 'matlab_backslash')

end

end


function [info, flag] = linsysfact_ldlchol(lhs, info)
    assert(isfield(lhs, 'mat'));
    lhs.mat = sparse(lhs.mat);
    if isfield(info, 'reg_init')
        beta = info.reg_init;
    else
        beta = 0;
    end
    if ~isfield(info, 'ordering') || isempty(info.ordering)
        info.ordering = analyze(lhs.mat, 'sym');
    end
    n_iter = 0;
    % if condest(lhs.mat11) > 1e16 beta = 1e-12; end
    if ~isfield(lhs, 'mat_regu')
        lhs.mat_regu = speye(size(lhs.mat));
    end
    while true
        mat_temp = lhs.mat + beta * lhs.mat_regu;
        [info.LD, flag] = ldlchol(mat_temp(info.ordering, info.ordering));
        n_iter = n_iter + 1;
        if flag == 0 || n_iter > 10
            break;
        elseif beta == 0
            beta = 1e-12;
        else
            beta = beta * 10;
        end
    end
    info.reg = beta;
end


function [info, flag] = linsysfact_chol(lhs, info)
    assert(isfield(lhs, 'mat'));
    lhs.mat = full(lhs.mat);
    if isfield(info, 'reg_init')
        beta = info.reg_init;
    else
        beta = 0;
    end
    n_iter = 0;
    % if condest(lhs.mat11) > 1e16 beta = 1e-12; end
    if ~isfield(lhs, 'mat_regu')
        lhs.mat_regu = speye(size(lhs.mat));
    end
    while true
        mat_temp = lhs.mat + beta * lhs.mat_regu;
        [info.R, flag] = chol(mat_temp);
        n_iter = n_iter + 1;
        if flag == 0 || n_iter > 10
            break;
        elseif beta == 0
            beta = 1e-12;
            % beta = 1e-16 * norm(model.Atbar, 'fro');
        else
            beta = beta * 10;
        end
    end
    info.reg = beta;
end

function [info, flag] = linsysfact_spchol(lhs, info)
    assert(isfield(lhs, 'mat'));
    lhs.mat = sparse(lhs.mat);
    if isfield(info, 'reg_init')
        beta = info.reg_init;
    else
        beta = 0;
    end
    n_iter = 0;
    % if condest(lhs.mat11) > 1e16 beta = 1e-12; end
    if ~isfield(lhs, 'mat_regu')
        lhs.mat_regu = speye(size(lhs.mat));
    end
    while true
        mat_temp = lhs.mat + beta * lhs.mat_regu;
        [info.R, flag, info.ordering] = chol(mat_temp, "vector");
        n_iter = n_iter + 1;
        if flag == 0 || n_iter > 10
            break;
        elseif beta == 0
            beta = 1e-12;
            % beta = 1e-16 * norm(model.Atbar, 'fro');
        else
            beta = beta * 10;
        end
    end
    info.reg = beta;
end

function [info, flag] = linsysfact_lchol(lhs, info)
    assert(isfield(lhs, 'mat'));
    lhs.mat = sparse(lhs.mat);
    if isfield(info, 'reg_init')
        beta = info.reg_init;
    else
        beta = 0;
    end
    n_iter = 0;
    % if condest(lhs.mat11) > 1e16 beta = 1e-12; end
    if ~isfield(lhs, 'mat_regu')
        lhs.mat_regu = speye(size(lhs.mat));
    end
    while true
        mat_temp = lhs.mat + beta * lhs.mat_regu;
        [info.L, flag] = lchol(mat_temp);
        n_iter = n_iter + 1;
        if flag == 0 || n_iter > 10
            break;
        elseif beta == 0
            beta = 1e-12;
            % beta = 1e-16 * norm(model.Atbar, 'fro');
        else
            beta = beta * 10;
        end
    end
    info.reg = beta;
end

function [info, flag] = linsysfact_pardiso(lhs, info)
    if isfield(info, 'reg_init')
        beta = info.reg_init;
    else
        beta = 0;
    end
    if ~isfield(lhs, 'mat_regu')
        lhs.mat_regu = speye(size(lhs.mat));
    end
    mat_temp = lhs.mat + beta * lhs.mat_regu;
    tril_lhs.mat = tril(mat_temp);
    if ~info.initialized
        info.pardiso_info = pardisoinit(-2, 0);
        info.initialized = true;
    end
    assert(isfield(info, 'pardiso_info'));
    info.pardiso_info = pardisoreorder(tril_lhs.mat, info.pardiso_info, false);
    % fprintf('[Pardiso] The factors have %d nonzero entries.\n',info.pardiso_info.iparm(18));
    info.pardiso_info = pardisofactor(tril_lhs.mat, info.pardiso_info, false);
    flag = 0;
end


function [info, flag] = linsysfact_ldlsparse(lhs, info)
    if isfield(info, 'reg_init')
        beta = info.reg_init;
    else
        beta = 0;
    end
    assert(isfield(lhs, 'mat'));
    lhs.mat = sparse(lhs.mat);
    if ~isfield(info, 'ordering') || isempty(info.ordering)
        info.ordering = analyze(lhs.mat, 'sym');
    end
    [info.L, info.D, parent, flops] = ldlsparse(lhs.mat, info.ordering);
    info.L = info.L + speye(size(info.L));
    info.reg = beta;
    flag = 1; % 
end

function [info, flag] = linsysfact_ldl(lhs, info)
    if isfield(info, 'reg_init')
        beta = info.reg_init;
    else
        beta = 0;
    end
    % if condest(lhs.mat11) > 1e12 beta = 1e-12; end
    if ~isfield(lhs, 'mat_regu')
        lhs.mat_regu = speye(size(lhs.mat));
    end
    mat_temp = lhs.mat + beta * lhs.mat_regu;
    [info.L, info.D, info.P, info.S] = ldl(mat_temp, 'vector');
    flag = 0;
end

function [info, flag] = linsysfact_lu(lhs, info)
    [info.L, info.U, info.P, info.Q] = lu(lhs.mat, 'vector');
    flag = 0;
end